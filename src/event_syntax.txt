Although events can be considered as continuous stream on the timeline, in practice (simulation), we slice (discretize)the events into instantaneous screen shot, so that a (single) event would be a collection of ordered instantaneous slice(s).The boundary between two events is the slice where transition happens.Formal definition of "events":Def1: "predicate", "argument", "label" and "proposition"Scene: A scene is a conceptual occurrence, state. The set of scenes are denoted by S.Argumentï¼› An argument is a collection of individuals and categories. Denote the set of all object by A.A k-predicate P is a k-nary (k>=1) map from A^k to a "scene". Normally, we use capitalized letter word to denote a predicate.e.g. EAT( , ) is a 2-predicateA label is either:(1) the name (literally the label) of a predicate, denoted by lower case letters,  e.g. the label of EAT( , ) would be 'eat'.There is a trivial one to one map between of a predicate and its label.(2) the symbol "null", which indicate an empty label.A proposition p is the term of a predicate with all arguments filled up. For example: EAT(John,Burger) is a proposition.Def2: "slice"Let L be the set of labels, then, a slice is a pair (l, t), where l belongs to L, and t is 0 or 1. For slice (l,t). l iscalled the name of the slice, and t is called the state of the slice.Example1:Let search,cook,eat be labels in L, then (cook,1), (eat,0) are slices, (0,cook), (search,2) are not.(null, 0),(null,1) are called empty slice.Plain English: slice is a pair of label and 0-1 state which denote "on-off"".Def3: "simple event"Let G be the set of grounded slice, built on slice set S, an event e is a map from an integer interval [a,b] (b>=a+1)to S, such that,1. e(i) = s, for i in [a, b-1], where s = (l,1) a slice in S2. e(b) = s', such that s' = (l,0)The interval [a,b] is called the period of the simple event, we say the simple event starts at a and ends at b, and b-ais called the length of event e, denoted by len(e). We notice that in a simple event, the slices have the same name l,thus we also call l the name of the event. An empty simple event, is an event whose name is 'null'.Plain English: A simple event is just a sequence of slices aligned in order, where the name of slices are the same, andthe state is always 1 until the last slice (which turn to 0). It describe the start, duration and the end of one simpleaction.Def5: "series event"For simple events e1, e2, if e1 ends at b and e2 starts at b+1, we say e2 is serial to e1, denoted by e1-e2, (order matters)For simple events e1,...en, n>=2, such that ei-ei+1 for 1<=i<=n-1, and ei with duration [ai, bi], we define e, the map from[a1, bn] to S, such that e become ei restricted to [ai, bi], denoted be e1e2...en as a series of e1,...en, and call it aseries event, starting at a1, ending at bn.Plain English, a series event is just a concatenation of 2 or more simple events.Def6: "parallel event"For simple events e1, e2, if they starts at the same time, then we say e1, e2 parallel, denoted by e1~e2 (order not matter)It is easy to notice that, "~" is transitive. For simple events e1,...en, which parallel, starting at a let b1...bn be the time they ends.WLOG, we assume bi<= bi+1, for all i, We define e, the map from [a,bn] to union of S^{i}'s, where i goes from 1 to n, such thatfor t in [a,bn], let I(t) be the smallest index i that ei ends not before t, then, e(t) = (en(t),en-1(t),...eI(t)(t)), as a parallerevent, starting at a, ending at bn, denoted be [e1,e2,...en].Now, we have simple event, series event and parallel event, which all have a start and an end, therefore we define the tworelations "series to" and "parallel to" among them similar to the way. And now we recursively define event from simple,series and parallel events.Def7 "event"(1) Simple events, series events and parallel evnts are events.(2) If e1, e2 are events, and e1-e2, then e1e2 is an event.(3) If e1, e2 are evnets, and e1~e2, then [e1,e2] is an event.Def8 "Event Tree"